openapi: 3.0.3
info:
  title: E-commerce API
  version: 1.0.0
servers:
  - url: http://localhost:3000/api

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserInput:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
      required:
        - email
        - password
        - name

    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
      required:
        - id
        - email
        - name

    ProductInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        stock:
          type: integer
      required:
        - name
        - price

    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
        stock:
          type: integer
      required:
        - id
        - name
        - price
        - stock

    CartInput:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
              quantity:
                type: integer
            required:
              - productId
              - quantity
      required:
        - items

    Cart:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
              quantity:
                type: integer
      required:
        - id
        - userId
        - items

    OrderInput:
      type: object
      properties:
        cartId:
          type: string
      required:
        - cartId

    Order:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        cartId:
          type: string
        total:
          type: number
        status:
          type: string
      required:
        - id
        - userId
        - cartId
        - total
        - status

paths:
  # -------------------------
  # Auth
  # -------------------------
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '409':
          description: User already exists

  /auth/login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials

  # -------------------------
  # Products
  # -------------------------
  /products:
    get:
      summary: Get all products
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input

  /products/{productId}:
    get:
      summary: Get a single product by ID
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    patch:
      summary: Update a product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '404':
          description: Product not found
    delete:
      summary: Delete a product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted
        '404':
          description: Product not found

  # -------------------------
  # Users
  # -------------------------
  /users:
    get:
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
    post:
      summary: Create a new user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized

  /users/{userId}:
    get:
      summary: Get a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found
    patch:
      summary: Update a user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '404':
          description: User not found
    delete:
      summary: Delete a user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted
        '401':
          description: Unauthorized
        '404':
          description: User not found

  # -------------------------
  # Carts
  # -------------------------
  /carts:
    get:
      summary: Get all carts for authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of carts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized
    post:
      summary: Add item(s) to a cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartInput'
      responses:
        '201':
          description: Cart created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized

  /carts/{cartId}:
    get:
      summary: Get a specific cart
      security:
        - bearerAuth: []
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Cart found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized
        '404':
          description: Cart not found
    patch:
      summary: Update cart item quantity
      security:
        - bearerAuth: []
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartInput'
      responses:
        '200':
          description: Cart updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '404':
          description: Cart not found
    delete:
      summary: Delete a cart
      security:
        - bearerAuth: []
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Cart deleted
        '401':
          description: Unauthorized
        '404':
          description: Cart not found

  /carts/{cartId}/checkout:
    post:
      summary: Checkout a cart (optional)
      security:
        - bearerAuth: []
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Checkout successful
        '400':
          description: Invalid cart
        '401':
          description: Unauthorized

  # -------------------------
  # Orders
  # -------------------------
  /orders:
    get:
      summary: Get all orders for authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
    post:
      summary: Create a new order (optional if using checkout)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized

  /orders/{orderId}:
    get:
      summary: Get an order by ID
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
        '404':
          description: Order not found
    put:
      summary: Update an order
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        '200':
          description: Order updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '404':
          description: Order not found
    delete:
      summary: Delete an order
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Order deleted
        '401':
          description: Unauthorized
        '404':
          description: Order not found
